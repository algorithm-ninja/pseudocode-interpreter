use std::str::FromStr;

use crate::ast::*;

grammar;

pub Program = Item*;

Item: Item = {
	<c:Comment?> ";"  => Item::Line(Line { statement: None, comment: c }),
	<doi:DeclOrInit> <c:Comment?> ";" => Item::Line(Line { statement: Some(Statement::Decl(doi)), comment: c }),
	<f:Function> => Item::Func(f),
};

Function: Func = {
  "function" <id:Ident> "(" <a: DeclList> ")" <cf:Comment?> ";" <b: Block> "end" "function" <cl:Comment?> ";" => Func { ident: id, args: a, ret: Type::Void, body: b, comments: (cf, cl) }, 
  "function" <id:Ident> "(" <a: DeclList> ")" "->" <ret: Type> <cf:Comment?> ";" <b: Block> "end" "function" <cl:Comment?> ";" => Func { ident: id, args: a, ret, body: b, comments: (cf, cl) }, 
};

pub Block = Line*;

Line: Line = {
	<s:Stmt?> <c:Comment?> ";" => Line { statement: s, comment: c },
	<bs:BlockStmt> => Line { statement: Some(bs), comment: None }
}

BlockStmt: Statement = {
	"if" <e:Expr> "then" <cf:Comment?> ";" <b: Block> "end" "if" <cl:Comment?> ";" => Statement::If(e, b, vec![], cf, None, cl),
  "if" <e:Expr> "then" <cf:Comment?> ";" <b1: Block> "else" <cm:Comment?> ";" <b2: Block> "end" "if" <cl:Comment?> ";" => Statement::If(e, b1, b2, cf, cm, cl),
  "while" <e:Expr> "do" <cf:Comment?> ";" <b: Block> "end" "while" <cl:Comment?> ";" => Statement::While(e, b, cf, cl),
	For => <>,
}

For: Statement = {
	"for" <i:Ident> "in" "[" <l:Expr> "..." <r:Expr> "]" "do" <cf:Comment?> ";" <b:Block> "end" "for" <cl:Comment?> ";" => Statement::For(Decl { ident: i, ty: Type::Integer, val: None }, l, r, true, b, cf, cl),
	"for" <i:Ident> "in" "[" <l:Expr> "..." <r:Expr> ")" "do" <cf:Comment?> ";" <b:Block> "end" "for" <cl:Comment?> ";" => Statement::For(Decl { ident: i, ty: Type::Integer, val: None }, l, r, false, b, cf, cl),
}

Stmt: Statement = {
  "[???]" => Statement::Blank,
  "<placeholder>" => Statement::SilentBlank,
  DeclOrInit => Statement::Decl(<>),
  <l:Expr> "<-" <r:Expr> => Statement::Assign(l, r),
  <e:Expr> => Statement::Expr(e),
  <r:Return> => Statement::Return(r),
};

Return: Option<Expr> = {
	"return" => None,
	"return" <e:Expr> => Some(e),
};

Expr: Expr = {
  BooleanExpr,
	ArithmeticExpr,
	ComparisonExpr,
};

BooleanExpr: Expr = {
	<l:BooleanExpr> <op:BooleanOp> <r:ValuedExpr> => Expr::Op(Box::new(l), op, Box::new(r)),
	<l:BooleanExpr> <op:BooleanOp> <r:Negation> => Expr::Op(Box::new(l), op, Box::new(r)),
	Negation,
}

ValuedExpr: Expr = {
	ComparisonExpr,
	ArithmeticExpr,
}

ComparisonExpr: Expr = {
	<l:ArithmeticExpr> <op:CompareOp> <r:ArithmeticExpr> => Expr::Op(Box::new(l), op, Box::new(r)),
}

ArithmeticExpr: Expr = {
	<l:ArithmeticExpr> <op:AddOp> <r:Factor> => Expr::Op(Box::new(l), op, Box::new(r)),
	Factor,
};

Factor: Expr = {
	<l:Factor> <op:MulOp> <r:Term> => Expr::Op(Box::new(l), op, Box::new(r)),
	Term,
	Literal,
};

Negation: Expr = {
	"not" <ve:ValuedExpr> => Expr::Not(Box::new(ve)),
}

Tuple: Tuple = {
	ExprTuple,
	DeclTuple,
}

ExprTuple: Tuple = {
	"(" <first:Expr> "," <others:Comma<Expr>> ")"
		=> Tuple::ExprTuple(vec![first].into_iter().chain(others.into_iter()).collect()),
}

DeclTuple: Tuple = {
	"(" <decls:VarDeclList> ")" => Tuple::DeclTuple(decls),
}

VarDeclList: Vec<Decl> = {
	<mut v:("variable" <Decl> ",")*> "variable" <d:Decl> => {
		v.push(d);
		v
	}
}

Term: Expr = {
	Ident => Expr::Ref(<>),
	ExprTuple => Expr::Tuple(<>),
	"(" <e:Expr> ")" => Expr::Parens(Box::new(e)),
	<t:Term> "[" <e:Expr> "]" => Expr::ArrayIndex(Box::new(t), Box::new(e)),
	<f:Ident> "(" <a:ArgList> ")" => Expr::FunctionCall(f, a),
};

Ident: String = {
  r"[a-zA-Z][a-zA-Z0-9_]*" => String::from(<>),
}

Literal: Expr = {
	Num => Expr::Integer(<>),
	Str => Expr::String(<>),
	Arr => Expr::Array(<>),
}

Num: i64 = {
	r"[0-9]+" => i64::from_str(<>).unwrap(),
	r"-[0-9]+" => i64::from_str(<>).unwrap(),
};

Str: String = {
	r###""[^"]*""### => String::from(<>),
}

Arr: Vec<Expr> = {
	"[" <v:Comma<Expr>> "]" => v,
}

Comma<T>: Vec<T> = {
	<mut v:(<T> ",")*> <e:T?> => match e {
		None => v,
		Some(e) => {
			v.push(e);
			v
		}
	}
};

Decl: Decl = {
  <ident:Ident> ":" <ty:Type> => Decl { ident: ident, ty: ty, val: None },
};

DeclOrInit: Decl = {
	"variable" <ident:Ident> ":" <ty:Type> => Decl { ident: ident, ty: ty, val: None },
	"variable" <ident:Ident> ":" <ty:Type> "<-" <e:Expr> => Decl { ident: ident, ty: ty, val: Some(e) },
}

Type: Type = {
  "integer" => Type::Integer,
	"string" => Type::String,
  <t:Type> "[" "]" => Type::Array(Box::new(t)),
  // TODO
};

ArgList = Comma<Expr>;
DeclList = Comma<Decl>;

AddOp: Op = {
  "+" => Op::Sum,
  "-" => Op::Sub,
};

MulOp: Op = {
  "*" => Op::Mul,
  "/" => Op::Div,
  "mod" => Op::Mod,
  "MOD" => Op::Mod,
};

CompareOp: Op = {
  "<=" => Op::Le,
  "<" => Op::Lt,
  ">=" => Op::Ge,
  ">" => Op::Gt,
  "==" => Op::Eq,
  "!=" => Op::Ne,
};

BooleanOp: Op = {
  "and" => Op::And,
	"AND" => Op::And,
  "or" => Op::Or,
	"OR" => Op::Or,
};

Comment: String = {
	r"[/-/]{2}[^;]*" => String::from(<>),
}
